# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Python Package

on:
  release:
    types:
      - published

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install -E web
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Install twine
        run: pip install twine

      - name: Build
        run: |
          poetry build

      - name: Publish on Pip
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload dist/*

  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install -E web
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Build executable
        run: poetry run python ./scripts/build.py

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*

  build-arm:
    runs-on: ubuntu-latest
    name: Build on ubuntu-latest aarch64
    steps:
      - uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu_latest

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
            --volume "${PWD}/spotdl-v4:/spotdl"

          # The shell to run commands with in the container
          shell: /bin/sh

          run: |
            cd /spotdl
            apt update
            apt install python python-pip
            pip install poetry
            poetry install -E web
            poetry run python ./scripts/build.py
            cd dist
            for file in dist/spotdl*; do echo cp "$file" "/artifacts/${file}-aarch64"; done

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${PWD}/artifacts/*


